import socket 

import pickle 

import numpy 

import threading 

 

import tensorflow.keras 

import pygad.kerasga 

import pygad 

import pandas as pd 

import numpy as np 

import kivy.app 

import kivy.uix.button 

import kivy.uix.label 

import kivy.uix.boxlayout 

import kivy.uix.textinput 

 

class ClientApp(kivy.app.App): 

     

    def __init__(self): 

        super().__init__() 

 

    def create_socket(self, *args): 

        self.soc = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM) 

        self.label.text = "Socket Created" 

 

        self.create_socket_btn.disabled = True 

        self.connect_btn.disabled = False 

        self.close_socket_btn.disabled = False 

 

    def connect(self, *args): 

        try: 

            self.soc.connect((self.server_ip.text, int(self.server_port.text))) 

            self.label.text = "Successful Connection to the Server" 

     

            self.connect_btn.disabled = True 

            self.recv_train_model_btn.disabled = False 

 

        except BaseException as e: 

            self.label.text = "Error Connecting to the Server" 

            print("Error Connecting to the Server: {msg}".format(msg=e)) 

 

            self.connect_btn.disabled = False 

            self.recv_train_model_btn.disabled = True 

             

             

    def text_submit(self, *args): 

                         

        print("Query: ", self.student_text_input.text) 

         

         

        self.text_submit_btn.disabled = True 

        self.connect_btn.disabled = False 

             

 

    def recv_train_model(self, *args): 

        global GANN_instance, best_sol_idx, status 

          

        self.recv_train_model_btn.disabled = True 

        self.predict_btn.disabled = False 

        recvThread = RecvThread(kivy_app=self, buffer_size=4096, recv_timeout=320) 

        recvThread.start() 

         

         

    def predict(self, *args): 

        global model, best_sol_idx, status, keras_ga 

         

        self.predict_btn.disabled = True 

        self.recv_train_model_btn.disabled = False 

 

         

        query =[] 

         

        query.append(self.student_text_input.text)  

 

        df = pd.Series(query) 

         

 

        import re 

        import string 

 

        def remove_punct(text): 

            translator = str.maketrans("", "", string.punctuation) 

            return text.translate(translator) 

 

 

        df= df.map(remove_punct) 

 

        import nltk 

        nltk.download('stopwords') 

        from nltk.corpus import stopwords 

 

        stop = set(stopwords.words("english")) 

 

        def remove_stopwords(text): 

            filtered_words = [word.lower() for word in text.split() if word.lower() not in stop] 

            return " ".join(filtered_words) 

 

        df= df.map(remove_stopwords) 

         

        print(df) 

 

        from collections import Counter 

 

        #count unique words 

        def counter_word(text_col): 

            count = Counter() 

            for text in text_col.values: 

                for word in text.split(): 

                    count [word] += 1 

            return count 

 

        counter = counter_word(df) 

 

        num_unique_words = len(counter) 

        vocab_size = 598 

         

        print(vocab_size) 

         

        encoded_messages = [one_hot(d, vocab_size) for d in df] 

 

         

        print(encoded_messages) 

 

        max_length = 20 

        padded_messages = pad_sequences(encoded_messages, maxlen=max_length, padding='post', truncating='post') 

         

 

 

        X_train = [] 

 

        X_train.append(padded_messages) 

         

        X_train = np.array(X_train) 

         

        model = keras_ga.model 

         

        ga_instance = prepare_GA(GANN_instance) 

        best_sol_idx = ga_instance.best_solution()[2] 

        

 

        predictions = model.predict(X_train) 

        print("Model Predictions: {predictions}".format(predictions=predictions)) 

        self.label.text = "Model Predictions: {predictions}".format(predictions=predictions) 

         

 

    def close_socket(self, *args): 

        self.soc.close() 

        self.label.text = "Socket Closed" 

 

        self.create_socket_btn.disabled = False 

        self.connect_btn.disabled = True 

        self.recv_train_model_btn.disabled = True 

        self.predict_btn = True 

        self.close_socket_btn.disabled = True 

 

    def build(self): 

        self.create_socket_btn = kivy.uix.button.Button(text="Create Socket") 

        self.create_socket_btn.bind(on_press=self.create_socket) 

 

        self.server_ip = kivy.uix.textinput.TextInput(hint_text="Server IPv4 Address", text="localhost") 

        self.server_port = kivy.uix.textinput.TextInput(hint_text="Server Port Number", text="10000") 

 

        self.server_info_boxlayout = kivy.uix.boxlayout.BoxLayout(orientation="horizontal") 

        self.server_info_boxlayout.add_widget(self.server_ip) 

        self.server_info_boxlayout.add_widget(self.server_port) 

 

        self.connect_btn = kivy.uix.button.Button(text="Connect to Server", disabled=True) 

        self.connect_btn.bind(on_press=self.connect) 

         

        self.student_text_input = kivy.uix.textinput.TextInput(hint_text="Descrpition of query", multiline = False) 

         

        self.text_submit_btn = kivy.uix.button.Button(text="Submit query") 

        self.text_submit_btn.bind(on_press=self.text_submit) 

 

        self.recv_train_model_btn = kivy.uix.button.Button(text="Receive & Train Model", disabled=True) 

        self.recv_train_model_btn.bind(on_press=self.recv_train_model) 

 

        self.close_socket_btn = kivy.uix.button.Button(text="Close Socket", disabled=True) 

        self.close_socket_btn.bind(on_press=self.close_socket) 

         

        self.predict_btn= kivy.uix.button.Button(text="Query prediction", disabled=True) 

        self.predict_btn.bind(on_press=self.predict) 

 

         

 

        self.label = kivy.uix.label.Label(text="Socket Status") 

 

        self.box_layout = kivy.uix.boxlayout.BoxLayout(orientation="vertical") 

        self.box_layout.add_widget(self.create_socket_btn) 

        self.box_layout.add_widget(self.server_info_boxlayout) 

        self.box_layout.add_widget(self.student_text_input) 

        self.box_layout.add_widget(self.text_submit_btn) 

        self.box_layout.add_widget(self.connect_btn) 

        self.box_layout.add_widget(self.recv_train_model_btn) 

        self.box_layout.add_widget(self.predict_btn) 

        self.box_layout.add_widget(self.close_socket_btn) 

        self.box_layout.add_widget(self.label) 

 

        return self.box_layout 

 

def fitness_func(solution, sol_idx): 

    global keras_ga, data_inputs, data_outputs 

 

    model = keras_ga.model 

 

    model_weights_matrix = pygad.kerasga.model_weights_as_matrix(model=model, 

                                                                 weights_vector=solution) 

    model.set_weights(weights=model_weights_matrix) 

    predictions = model.predict(data_inputs) 

    bce = tensorflow.keras.losses.BinaryCrossentropy() 

    solution_fitness = 1.0 / (bce(data_outputs, predictions).numpy() + 0.00000001) 

 

    return solution_fitness 

 

 

def callback_generation(ga_instance): 

    global GANN_instance, last_fitness 

    population_matrices = pygad.gann.population_as_matrices(population_networks=GANN_instance.population_networks,  

                                                            population_vectors=ga_instance.population) 

    GANN_instance.update_population_trained_weights(population_trained_weights=population_matrices) 

    print("Generation = {generation}".format(generation=ga_instance.generations_completed)) 

    print("Fitness    = {fitness}".format(fitness=ga_instance.best_solution()[1])) 

    print("Change     = {change}".format(change=ga_instance.best_solution()[1] - last_fitness)) 

 

 

 

def prepare_GA(server_data): 

    global keras_ga 

 

    population_weights = server_data["population_weights"] 

    model_json = server_data["model_json"] 

    num_solutions = server_data["num_solutions"] 

 

    model = tensorflow.keras.models.model_from_json(model_json) 

    keras_ga = pygad.kerasga.KerasGA(model=model, 

                                     num_solutions=num_solutions) 

 

    keras_ga.population_weights = population_weights 

 

    population_vectors = keras_ga.population_weights 

 

 

    initial_population = population_vectors.copy() 

     

    num_parents_mating = 4  

 

    num_generations = 50  

    mutation_percent_genes = 5  

    ga_instance = pygad.GA(num_generations=num_generations,  

                           num_parents_mating=num_parents_mating,  

                           initial_population=initial_population, 

                           fitness_func=fitness_func, 

                           mutation_percent_genes=mutation_percent_genes) 

 

    return ga_instance 

 

data_inputs = numpy.array([[70, 466, 381, 314,  19, 220,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 

   0,   0], 

                           [67, 218, 232,  95,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 

   0,   0]]) 

 

data_outputs = numpy.array([4,  

                            0]) 

 

class RecvThread(threading.Thread): 

 

    def __init__(self, kivy_app, buffer_size, recv_timeout): 

        threading.Thread.__init__(self) 

        self.kivy_app = kivy_app 

        self.buffer_size = buffer_size 

        self.recv_timeout = recv_timeout 

 

    def recv(self): 

        received_data = b"" 

        while True: 

            try: 

                self.kivy_app.soc.settimeout(self.recv_timeout) 

                received_data += self.kivy_app.soc.recv(self.buffer_size) 

 

                try: 

                    pickle.loads(received_data) 

                    self.kivy_app.label.text = "All data is received from the server." 

                    print("All data is received from the server.") 

                    break 

                except BaseException: 

                    pass 

 

            except socket.timeout: 

                print("A socket.timeout exception occurred because the server did not send any data for {recv_timeout} seconds.".format(recv_timeout=self.recv_timeout)) 

                self.kivy_app.label.text = "{recv_timeout} Seconds of Inactivity. socket.timeout Exception Occurred".format(recv_timeout=self.recv_timeout) 

                return None, 0 

            except BaseException as e: 

                return None, 0 

                print("Error While Receiving Data from the Server: {msg}.".format(msg=e)) 

                self.kivy_app.label.text = "Error While Receiving Data from the Server" 

 

        try: 

            received_data = pickle.loads(received_data) 

        except BaseException as e: 

            print("Error Decoding the Data: {msg}.\n".format(msg=e)) 

            self.kivy_app.label.text = "Error Decoding the Client's Data" 

            return None, 0 

     

        return received_data, 1 

 

    def run(self): 

        global server_data 

 

        subject = "echo" 

        server_data = None 

        best_sol_idx = -1 

        best_model_weights_vector = None 

 

        while True: 

            data_dict = {"best_model_weights_vector": best_model_weights_vector} 

            data = {"subject": subject, "data": data_dict} 

 

            data_byte = pickle.dumps(data) 

 

            self.kivy_app.label.text = "Sending a Message of Type {subject} to the Server".format(subject=subject) 

            try: 

                self.kivy_app.soc.sendall(data_byte) 

            except BaseException as e: 

                self.kivy_app.label.text = "Error Connecting to the Server. The server might has been closed." 

                print("Error Connecting to the Server: {msg}".format(msg=e)) 

                break 

 

            self.kivy_app.label.text = "Receiving Reply from the Server" 

            received_data, status = self.recv() 

            if status == 0: 

                self.kivy_app.label.text = "Nothing Received from the Server" 

                break 

            else: 

                self.kivy_app.label.text = "New Message from the Server" 

 

            subject = received_data["subject"] 

            if subject == "model": 

                server_data = received_data["data"] 

            elif subject == "done": 

                self.kivy_app.label.text = "Model is Trained" 

                break 

            else: 

                self.kivy_app.label.text = "Unrecognized Message Type: {subject}".format(subject=subject) 

                break 

 

            ga_instance = prepare_GA(server_data) 

 

             

            ga_instance.run() 

 

            subject = "model" 

            best_sol_idx = ga_instance.best_solution()[2] 

            best_model_weights_vector = ga_instance.population[best_sol_idx, :] 

 

clientApp = ClientApp() 

clientApp.title = "Client App" 

clientApp.run() 
