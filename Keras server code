import numpy as np 

import pandas as pd 

import os 

from tensorflow import keras 

from keras.preprocessing.text import one_hot 

from tensorflow.keras.preprocessing.sequence import pad_sequences 

from tensorflow.keras.models import Sequential 

from tensorflow.keras.layers import Dense 

from tensorflow.keras.layers import Flatten 

from tensorflow.keras.layers import Embedding 

from sklearn.model_selection import train_test_split 

from tensorflow import keras 

from tensorflow.keras import layers 

import tensorflow.keras 

import tensorflow as tf 

 

import socket 

import pickle 

import threading 

import time 

import numpy 

 

import tensorflow.keras 

import pygad.kerasga 

 

 

import kivy.app 

import kivy.uix.button 

import kivy.uix.label 

import kivy.uix.textinput 

import kivy.uix.boxlayout 

 

class ServerApp(kivy.app.App): 

     

    def __init__(self): 

        super().__init__() 

 

    def create_socket(self, *args): 

        self.soc = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM) 

        self.label.text = "Socket Created" 

 

        self.create_socket_btn.disabled = True 

        self.bind_btn.disabled = False 

        self.close_socket_btn.disabled = False 

 

    def bind_socket(self, *args): 

        ipv4_address = self.server_ip.text 

        port_number = self.server_port.text 

        self.soc.bind((ipv4_address, int(port_number))) 

        self.label.text = "Socket Bound to IPv4 & Port Number" 

 

        self.bind_btn.disabled = True 

        self.listen_btn.disabled = False 

 

    def listen_accept(self, *args): 

        self.soc.listen(1) 

        self.label.text = "Socket is Listening for Connections" 

 

        self.listen_btn.disabled = True 

 

        self.listenThread = ListenThread(kivy_app=self) 

        self.listenThread.start() 

 

    def close_socket(self, *args): 

        self.soc.close() 

        self.label.text = "Socket Closed" 

 

        self.create_socket_btn.disabled = False 

        self.bind_btn.disabled = True 

        self.listen_btn.disabled = True 

        self.close_socket_btn.disabled = True 

 

    def build(self): 

        self.create_socket_btn = kivy.uix.button.Button(text="Create Socket", disabled=False) 

        self.create_socket_btn.bind(on_press=self.create_socket) 

 

        self.server_ip = kivy.uix.textinput.TextInput(hint_text="IPv4 Address", text="localhost") 

        self.server_port = kivy.uix.textinput.TextInput(hint_text="Port Number", text="10000") 

 

        self.server_socket_box_layout = kivy.uix.boxlayout.BoxLayout(orientation="horizontal") 

        self.server_socket_box_layout.add_widget(self.server_ip) 

        self.server_socket_box_layout.add_widget(self.server_port) 

 

        self.bind_btn = kivy.uix.button.Button(text="Bind Socket", disabled=True) 

        self.bind_btn.bind(on_press=self.bind_socket) 

 

        self.listen_btn = kivy.uix.button.Button(text="Listen to Connections", disabled=True) 

        self.listen_btn.bind(on_press=self.listen_accept) 

 

        self.close_socket_btn = kivy.uix.button.Button(text="Close Socket", disabled=True) 

        self.close_socket_btn.bind(on_press=self.close_socket) 

 

        self.label = kivy.uix.label.Label(text="Socket Status") 

 

        self.box_layout = kivy.uix.boxlayout.BoxLayout(orientation="vertical") 

 

        self.box_layout.add_widget(self.create_socket_btn) 

        self.box_layout.add_widget(self.server_socket_box_layout) 

        self.box_layout.add_widget(self.bind_btn) 

        self.box_layout.add_widget(self.listen_btn) 

        self.box_layout.add_widget(self.close_socket_btn) 

        self.box_layout.add_widget(self.label) 

 

        return self.box_layout 

 

model = None 

 

data_inputs = numpy.array([[429, 590, 261, 330, 155,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 

   0,   0], 

                           [89, 159, 236, 236,  59, 393,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 

   0,   0]]) 

 

 

data_outputs = numpy.array([4,  

                            1])  

 

 

df = pd.read_excel("sample data for disso with one feature.xlsx", names = ['text', 'category']) 

 

df = df.sample(frac = 1) 

 

import re 

import string 

 

def remove_punct(text): 

    translator = str.maketrans("", "", string.punctuation) 

    return text.translate(translator) 

 

 

df["text"] = df.text.map(remove_punct) 

 

import nltk 

nltk.download('stopwords') 

from nltk.corpus import stopwords 

 

stop = set(stopwords.words("english")) 

 

def remove_stopwords(text): 

    filtered_words = [word.lower() for word in text.split() if word.lower() not in stop] 

    return " ".join(filtered_words) 

 

df["text"] = df.text.map(remove_stopwords) 

 

from collections import Counter 

 

def counter_word(text_col): 

    count = Counter() 

    for text in text_col.values: 

        for word in text.split(): 

            count [word] += 1 

    return count 

 

counter = counter_word(df.text) 

 

num_unique_words = len(counter) 

print(num_unique_words) 

 

vocab_size = num_unique_words 

encoded_messages = [one_hot(d, vocab_size) for d in df["text"]] 

 

max_length = 20 

padded_messages = pad_sequences(encoded_messages, maxlen=max_length, padding='post', truncating='post') 

padded_labels = df["category"] 

 

X_train,X_test,y_train,y_test = train_test_split(padded_messages, padded_labels,test_size=0.2) 

 

X_train = np.array(X_train) 

y_train = tensorflow.keras.utils.to_categorical(y_train) 

y_train = np.array(y_train) 

 

X_test = np.array(X_test) 

y_test = tensorflow.keras.utils.to_categorical(y_test) 

y_test = np.array(y_test) 

 

X_test = X_test.reshape(-1,1) 

 

embeded_vector_size = 40 

 

inputs = keras.Input(shape=(20)) 

embedding_layer = layers.Embedding(num_unique_words, embeded_vector_size, input_length=max_length, name="embedding")(inputs) 

flatten_layer = layers.Flatten()(embedding_layer) 

dense_layer = layers.Dense(5, activation='softmax')(flatten_layer) 

 

model = keras.Model(inputs=inputs, outputs=dense_layer) 

 

 

keras_ga = pygad.kerasga.KerasGA(model=model, 

                                 num_solutions=10) 

 

class SocketThread(threading.Thread): 

 

    def __init__(self, connection, client_info, kivy_app, buffer_size=4096, recv_timeout=60): 

        threading.Thread.__init__(self) 

        self.connection = connection 

        self.client_info = client_info 

        self.buffer_size = buffer_size 

        self.recv_timeout = recv_timeout 

        self.kivy_app = kivy_app 

 

    def recv(self): 

        all_data_received_flag = False 

        received_data = b"" 

        while True: 

            try: 

                data = self.connection.recv(self.buffer_size) 

                received_data += data 

 

                try: 

                    pickle.loads(received_data) 

                    all_data_received_flag = True 

                except BaseException: 

                    pass 

 

                if data == b'':  

                    received_data = b"" 

                 

                    if (time.time() - self.recv_start_time) > self.recv_timeout: 

                        return None, 0  

 

                elif all_data_received_flag: 

                    print("All data ({data_len} bytes) Received from {client_info}.".format(client_info=self.client_info, data_len=len(received_data))) 

                    self.kivy_app.label.text = "All data ({data_len} bytes) Received from {client_info}.".format(client_info=self.client_info, data_len=len(received_data)) 

 

                    if len(received_data) > 0: 

                        try: 

                            received_data = pickle.loads(received_data) 

                            return received_data, 1 

 

                        except BaseException as e: 

                            print("Error Decoding the Client's Data: {msg}.\n".format(msg=e)) 

                            self.kivy_app.label.text = "Error Decoding the Client's Data" 

                            return None, 0 

 

                else: 

                    self.recv_start_time = time.time() 

 

            except BaseException as e: 

                print("Error Receiving Data from the Client: {msg}.\n".format(msg=e)) 

                self.kivy_app.label.text = "Error Receiving Data from the Client" 

                return None, 0 

 

    def model_averaging(self, model, best_model_weights_matrix): 

        model_weights_vector = pygad.kerasga.model_weights_as_vector(model=model) 

        model_weights_matrix = pygad.kerasga.model_weights_as_matrix(model=model, 

                                                                     weights_vector=model_weights_vector) 

 

        new_weights = model_weights_matrix 

        for idx, arr in enumerate(new_weights): 

            new_weights[idx] = new_weights[idx] + best_model_weights_matrix[idx] 

            new_weights[idx] = new_weights[idx] / 2 

 

        model.set_weights(weights=new_weights) 

 

    def reply(self, received_data): 

        global keras_ga, data_inputs, data_outputs, model 

        if (type(received_data) is dict): 

            if (("data" in received_data.keys()) and ("subject" in received_data.keys())): 

                subject = received_data["subject"] 

                msg_model = received_data["data"] 

                print("Client's Message Subject is {subject}.".format(subject=subject)) 

                self.kivy_app.label.text = "Client's Message Subject is {subject}".format(subject=subject) 

 

                print("Replying to the Client.") 

                self.kivy_app.label.text = "Replying to the Client" 

                if subject == "echo": 

                    if msg_model is None: 

                        data_dict = {"population_weights": keras_ga.population_weights, 

                                     "model_json": model.to_json(), 

                                     "num_solutions": keras_ga.num_solutions} 

                        data = {"subject": "model", "data": data_dict} 

                    else: 

                        predictions = model.predict(X_test[0]) 

                        ba = tensorflow.keras.metrics.BinaryAccuracy() 

                        ba.update_state(data_outputs, predictions) 

                        accuracy = ba.result().numpy() 

 

                        if accuracy == 1.0: 

                            data = {"subject": "done", "data": None} 

                        else: 

                            data_dict = {"population_weights": keras_ga.population_weights, 

                                         "model_json": model.to_json(), 

                                         "num_solutions": keras_ga.num_solutions} 

                            data = {"subject": "model", "data": data_dict} 

                    try: 

                        response = pickle.dumps(data) 

                    except BaseException as e: 

                        print("Error Encoding the Message: {msg}.\n".format(msg=e)) 

                        self.kivy_app.label.text = "Error Encoding the Message" 

                elif subject == "model": 

                    try: 

                        best_model_weights_vector = received_data["data"]["best_model_weights_vector"] 

 

                        best_model_weights_matrix = pygad.kerasga.model_weights_as_matrix(model=model, 

                                                                                          weights_vector=best_model_weights_vector) 

                        if model is None: 

                            print("Model is None") 

                        else: 

                            new_model = tensorflow.keras.models.clone_model(model) 

                            new_model.set_weights(weights=best_model_weights_matrix) 

                            predictions = model.predict(X_test[0]) 

     

                            ba = tensorflow.keras.metrics.BinaryAccuracy() 

                            ba.update_state(data_outputs, predictions) 

                            accuracy = ba.result().numpy() 

 

                            

                            if accuracy == 1.0: 

                                data = {"subject": "done", "data": None} 

                                response = pickle.dumps(data) 

                                return 

 

                            self.model_averaging(model, best_model_weights_matrix) 

 

 

                        predictions = model.predict(X_tests[0]) 

                        print("Model Predictions: {predictions}".format(predictions=predictions)) 

 

                        ba = tensorflow.keras.metrics.BinaryAccuracy() 

                        ba.update_state(data_outputs, predictions) 

                        accuracy = ba.result().numpy() 

                        print("Accuracy = {accuracy}\n".format(accuracy=accuracy)) 

                        self.kivy_app.label.text = "Accuracy = {accuracy}".format(accuracy=accuracy) 

 

                        if accuracy != 1.0: 

                            data_dict = {"population_weights": keras_ga.population_weights, 

                                         "model_json": model.to_json(), 

                                         "num_solutions": keras_ga.num_solutions} 

                            data = {"subject": "model", "data": data_dict} 

                            response = pickle.dumps(data) 

                        else: 

                            data = {"subject": "done", "data": None} 

                            response = pickle.dumps(data) 

 

                    except BaseException as e: 

                        print("reply(): Error Decoding the Client's Data: {msg}.\n".format(msg=e)) 

                        self.kivy_app.label.text = "reply(): Error Decoding the Client's Data" 

                else: 

                    response = pickle.dumps("Response from the Server") 

                             

                try: 

                    self.connection.sendall(response) 

                except BaseException as e: 

                    print("Error Sending Data to the Client: {msg}.\n".format(msg=e)) 

                    self.kivy_app.label.text = "Error Sending Data to the Client: {msg}".format(msg=e) 

 

            else: 

                print("The received dictionary from the client must have the 'subject' and 'data' keys available. The existing keys are {d_keys}.".format(d_keys=received_data.keys())) 

                self.kivy_app.label.text = "Error Parsing Received Dictionary" 

        else: 

            print("A dictionary is expected to be received from the client but {d_type} received.".format(d_type=type(received_data))) 

            self.kivy_app.label.text = "A dictionary is expected but {d_type} received.".format(d_type=type(received_data)) 

 

    def run(self): 

        print("Running a Thread for the Connection with {client_info}.".format(client_info=self.client_info)) 

        self.kivy_app.label.text = "Running a Thread for the Connection with {client_info}.".format(client_info=self.client_info) 

 

        while True: 

            self.recv_start_time = time.time() 

            time_struct = time.gmtime() 

            date_time = "Waiting to Receive Data Starting from {day}/{month}/{year} {hour}:{minute}:{second} GMT".format(year=time_struct.tm_year, month=time_struct.tm_mon, day=time_struct.tm_mday, hour=time_struct.tm_hour, minute=time_struct.tm_min, second=time_struct.tm_sec) 

            print(date_time) 

            received_data, status = self.recv() 

            if status == 0: 

                self.connection.close() 

                self.kivy_app.label.text = "Connection Closed with {client_info}".format(client_info=self.client_info) 

                print("Connection Closed with {client_info} either due to inactivity for {recv_timeout} seconds or due to an error.".format(client_info=self.client_info, recv_timeout=self.recv_timeout), end="\n\n") 

                break 

 

            self.reply(received_data) 

 

class ListenThread(threading.Thread): 

 

    def __init__(self, kivy_app): 

        threading.Thread.__init__(self) 

        self.kivy_app = kivy_app 

 

    def run(self): 

        while True: 

            try: 

                connection, client_info = self.kivy_app.soc.accept() 

                self.kivy_app.label.text = "New Connection from {client_info}".format(client_info=client_info) 

                socket_thread = SocketThread(connection=connection, 

                                             client_info=client_info,  

                                             kivy_app=self.kivy_app, 

                                             buffer_size=4096, 

                                             recv_timeout=60) 

                socket_thread.start() 

            except BaseException as e: 

                self.kivy_app.soc.close() 

                print("Error in the run() of the ListenThread class: {msg}.\n".format(msg=e)) 

                self.kivy_app.label.text = "Socket is No Longer Accepting Connections" 

                self.kivy_app.create_socket_btn.disabled = False 

                self.kivy_app.close_socket_btn.disabled = True 

                break 

 

serverApp = ServerApp() 

serverApp.title="Server App" 

serverApp.run() 
